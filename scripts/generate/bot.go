package main

import (
	"fmt"
	"strings"
)

func generateBotInterface(d APIDescription) error {
	file := strings.Builder{}
	file.WriteString(`
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gotgbot

import (
	"context"
	"encoding/json"
)

`)

	file.WriteString(`
// Our overall Bot interface which can be used to implement middleware and testing abstractions.
type Bot interface {
	// Essential methods to perform HTTP requests
	// PostWithContext sends POST requests to the bot API, with a context.
	PostWithContext(ctx context.Context, method string, params map[string]string, data map[string]NamedReader, opts *RequestOpts) (json.RawMessage, error)
	// TimeoutContext calculates the relevant context, with appropriate request timeout.
	TimeoutContext(opts *RequestOpts) (context.Context, context.CancelFunc)
	// Me gets the current bot details - usually obtained by a GetMe() at bot instantiation.
	Me() User
	
	// Generated API methods`)
	for _, tgMethodName := range orderedMethods(d) {
		tgMethod := d.Methods[tgMethodName]

		signature, _, _, err := generateMethodSignature(d, tgMethod)
		if err != nil {
			return fmt.Errorf("failed to generate bot interface for %s: %w", tgMethodName, err)
		}

		file.WriteString("\n" + signature)
	}
	file.WriteString("}")

	return writeGenToFile(file, "gen_bot_interface.go")
}
