package main

import (
	"encoding/json"
	"fmt"
	"go/format"
	"os"
	"sort"
	"strings"
)

type APIDescription struct {
	Types   map[string]TypeDescription   `json:"types"`
	Methods map[string]MethodDescription `json:"methods"`
}

type TypeDescription struct {
	Description string       `json:"description"`
	Fields      []TypeFields `json:"fields"`
}

type TypeFields struct {
	Field       string   `json:"field"`
	Types       []string `json:"types"`
	Description string   `json:"description"`
}

type MethodDescription struct {
	Fields      []MethodFields `json:"fields"`
	Returns     []string       `json:"returns"`
	Description string         `json:"description"`
}

type MethodFields struct {
	Parameter   string   `json:"parameter"`
	Types       []string `json:"types"`
	Required    string   `json:"required"`
	Description string   `json:"description"`
}

func main() {
	api, err := os.Open("api.json")
	if err != nil {
		panic(err)
	}

	var d APIDescription
	if err = json.NewDecoder(api).Decode(&d); err != nil {
		panic(err)
	}

	err = generateTypes(d)
	if err != nil {
		panic(err)
	}
	err = generateMethods(d)
	if err != nil {
		panic(err)
	}
}

func generateTypes(d APIDescription) error {
	file := strings.Builder{}
	file.WriteString(`
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gen

`)

	// TODO: Obtain ordered map to retain tg ordering
	var types []string
	for k := range d.Types {
		types = append(types, k)
	}
	sort.Strings(types)

	for _, tgTypeName := range types {
		tgType := d.Types[tgTypeName]

		file.WriteString("\n// " + tgType.Description)
		file.WriteString("\ntype " + tgTypeName + " struct {")
		for _, fields := range tgType.Fields {
			file.WriteString("\n// " + fields.Description)

			goType := toGoTypes(fields.Types[0])
			if isTgType(d.Types, goType) && strings.HasPrefix(fields.Description, "Optional.") {
				goType = "*" + goType
			}

			file.WriteString("\n" + snakeToTitle(fields.Field) + " " + goType) // TODO: NOT just default to first type
		}

		file.WriteString("\n}")

	}

	return writeGenToFile(file, "gen/types.go")
}

func writeGenToFile(file strings.Builder, filename string) error {
	write, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)
	if err != nil {
		return err
	}

	bs := []byte(file.String())

	_, err = write.WriteAt(bs, 0)
	if err != nil {
		return err
	}

	fmted, err := format.Source(bs)
	if err != nil {
		return err
	}

	_, err = write.WriteAt(fmted, 0)
	if err != nil {
		return err
	}
	return nil
}

func isTgType(tgTypes map[string]TypeDescription, goType string) bool {
	_, ok := tgTypes[goType]
	return ok
}

func generateMethods(d APIDescription) error {
	file := strings.Builder{}
	file.WriteString(`
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gen

`)

	// TODO: Obtain ordered map to retain tg ordering
	var methods []string
	for k := range d.Methods {
		methods = append(methods, k)
	}
	sort.Strings(methods)

	for _, tgMethodName := range methods {
		tgMethod := d.Methods[tgMethodName]

		// defaulting to [0] is ok because its either message or bool
		retType := toGoTypes(tgMethod.Returns[0])
		if isTgType(d.Types, retType) {
			retType = "*" + retType
		}
		defaultRetVal := getDefaultReturnVal(retType)

		file.WriteString("\n// " + tgMethod.Description)
		// TODO: add optional parameter support
		file.WriteString("\nfunc " + strings.Title(tgMethodName) + "(" + getNonOptionalArgs(tgMethod) + ") (" + retType + ", error) {")
		file.WriteString("\n// This method has content") // TODO
		file.WriteString("\nreturn " + defaultRetVal + ", nil")
		file.WriteString("\n}")
	}

	return writeGenToFile(file, "gen/methods.go")
}

func getNonOptionalArgs(method MethodDescription) string {
	var args []string
	for _, f := range method.Fields {
		if f.Required != "Yes" {
			continue
		}
		// TODO: Not just assume first type
		args = append(args, fmt.Sprintf("%s %s", snakeToCamel(f.Parameter), toGoTypes(f.Types[0])))
	}
	return strings.Join(args, ", ")
}

func snakeToTitle(s string) string {
	bd := strings.Builder{}
	for _, s := range strings.Split(s, "_") {
		bd.WriteString(strings.Title(s))
	}
	return bd.String()
}

func snakeToCamel(s string) string {
	title := snakeToTitle(s)
	return strings.ToLower(title[:1]) + title[1:]
}

func toGoTypes(s string) string {
	pref := ""
	for strings.HasPrefix(s, "Array of ") {
		pref += "[]"
		s = strings.TrimPrefix(s, "Array of ")
	}

	switch s {
	case "Integer":
		return pref + "int64"
	case "Float":
		return pref + "float64"
	case "Boolean":
		return pref + "bool"
	case "String":
		return pref + "string"
	}
	return pref + s
}

func getDefaultReturnVal(s string) string {
	if strings.HasPrefix(s, "*") || strings.HasPrefix(s, "[]") {
		return "nil"
	}

	switch s {
	case "int64":
		return "0"
	case "float64":
		return "0.0"
	case "bool":
		return "false"
	case "string":
		return "\"\""
	}

	// this isnt great
	return s
}
