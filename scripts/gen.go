package main

import (
	"encoding/json"
	"fmt"
	"go/format"
	"os"
	"sort"
	"strings"
)

type APIDescription struct {
	Types   map[string]TypeDescription   `json:"types"`
	Methods map[string]MethodDescription `json:"methods"`
}

type TypeDescription struct {
	Description []string     `json:"description"`
	Fields      []TypeFields `json:"fields"`
	Href        string       `json:"href"`
	SubtypeOf   []string     `json:"subtype_of"`
}

type TypeFields struct {
	Field       string   `json:"field"`
	Types       []string `json:"types"`
	Description string   `json:"description"`
}

type MethodDescription struct {
	Fields      []MethodFields `json:"fields"`
	Returns     []string       `json:"returns"`
	Description []string       `json:"description"`
	Href        string         `json:"href"`
}

type MethodFields struct {
	Parameter   string   `json:"parameter"`
	Types       []string `json:"types"`
	Required    string   `json:"required"`
	Description string   `json:"description"`
}

func main() {
	api, err := os.Open("api.json")
	if err != nil {
		panic(err)
	}

	var d APIDescription
	if err = json.NewDecoder(api).Decode(&d); err != nil {
		panic(err)
	}

	// TODO: Use golang templates instead of string builders
	err = generateTypes(d)
	if err != nil {
		panic(err)
	}
	err = generateMethods(d)
	if err != nil {
		panic(err)
	}
}

func generateTypes(d APIDescription) error {
	file := strings.Builder{}
	file.WriteString(`
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gen

import "encoding/json"

`)

	// TODO: Obtain ordered map to retain tg ordering
	var types []string
	for k := range d.Types {
		types = append(types, k)
	}
	sort.Strings(types)

	for _, tgTypeName := range types {
		file.WriteString(generateTypeDef(d, tgTypeName))
	}

	return writeGenToFile(file, "gen/gen_types.go")
}

func generateTypeDef(d APIDescription, tgTypeName string) string {
	typeDef := strings.Builder{}
	tgType := d.Types[tgTypeName]

	for _, d := range tgType.Description {
		typeDef.WriteString("\n// " + d)
	}
	typeDef.WriteString("\n// " + tgType.Href)
	if len(tgType.Fields) == 0 {
		// todo: Generate interface methods for child functions
		typeDef.WriteString("\ntype " + tgTypeName + " interface{}")
		return typeDef.String()
	}

	var genCustomMarshalFields []TypeFields
	typeDef.WriteString("\ntype " + tgTypeName + " struct {")
	for _, fields := range tgType.Fields {
		typeDef.WriteString("\n// " + fields.Description)

		goType := toGoTypes(fields.Types[0]) // TODO: NOT just default to first type
		if isTgType(d.Types, goType) && strings.HasPrefix(fields.Description, "Optional.") {
			goType = "*" + goType
		}

		if isTgArray(fields.Types[0]) { // TODO: NOT just default to first type
			genCustomMarshalFields = append(genCustomMarshalFields, fields)
		}

		typeDef.WriteString("\n" + snakeToTitle(fields.Field) + " " + goType + " `json:\"" + fields.Field + "\"`")
	}

	typeDef.WriteString("\n}")

	if len(genCustomMarshalFields) > 0 {
		typeDef.WriteString(genCustomMarshal(tgTypeName, genCustomMarshalFields))
	}

	return typeDef.String()
}

func genCustomMarshal(name string, fields []TypeFields) string {
	marshalDef := strings.Builder{}

	marshalDef.WriteString("\n")
	marshalDef.WriteString("\nfunc (v " + name + ") MarshalJSON() ([]byte, error) {")
	marshalDef.WriteString("\n	type alias " + name)
	marshalDef.WriteString("\n	a := struct{alias}{")
	marshalDef.WriteString("\n		alias: (alias)(v),")
	marshalDef.WriteString("\n	}")
	for _, f := range fields {
		marshalDef.WriteString("\n	if a." + snakeToTitle(f.Field) + " == nil {")
		marshalDef.WriteString("\n		a." + snakeToTitle(f.Field) + " = make(" + toGoTypes(f.Types[0]) + ", 0)")
		marshalDef.WriteString("\n	}")
	}
	marshalDef.WriteString("\nreturn json.Marshal(a)")
	marshalDef.WriteString("\n}")

	return marshalDef.String()
}

func writeGenToFile(file strings.Builder, filename string) error {
	write, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)
	if err != nil {
		return err
	}

	bs := []byte(file.String())

	_, err = write.WriteAt(bs, 0)
	if err != nil {
		return err
	}

	fmted, err := format.Source(bs)
	if err != nil {
		return err
	}

	_, err = write.WriteAt(fmted, 0)
	if err != nil {
		return err
	}
	return nil
}

func isTgType(tgTypes map[string]TypeDescription, goType string) bool {
	_, ok := tgTypes[goType]
	return ok
}

func generateMethods(d APIDescription) error {
	file := strings.Builder{}
	file.WriteString(`
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gen
import (
	urlLib "net/url" // renamed to avoid clashes with url vars
	"encoding/json"
	"strconv"
	"fmt"
	"io"
)
`)

	// TODO: Obtain ordered map to retain tg ordering
	var methods []string
	for k := range d.Methods {
		methods = append(methods, k)
	}
	sort.Strings(methods)

	for _, tgMethodName := range methods {
		tgMethod := d.Methods[tgMethodName]
		file.WriteString(generateMethodDef(d, tgMethod, tgMethodName))
	}

	return writeGenToFile(file, "gen/gen_methods.go")
}

func generateMethodDef(d APIDescription, tgMethod MethodDescription, tgMethodName string) string {
	method := strings.Builder{}

	// defaulting to [0] is ok because its either message or bool
	retType := toGoTypes(tgMethod.Returns[0])
	if isTgType(d.Types, retType) {
		retType = "*" + retType
	}
	defaultRetVal := getDefaultReturnVal(retType)

	args, optionalsStruct := getArgs(tgMethodName, tgMethod)
	if optionalsStruct != "" {
		method.WriteString("\n" + optionalsStruct)
	}

	for _, d := range tgMethod.Description {
		method.WriteString("\n// " + d)
	}
	method.WriteString("\n// " + tgMethod.Href)

	method.WriteString("\nfunc (bot Bot) " + strings.Title(tgMethodName) + "(" + args + ") (" + retType + ", error) {")
	method.WriteString("\n	v := urlLib.Values{}")

	valueGen, hasData := methodArgsToValues(tgMethod, defaultRetVal)
	method.WriteString(valueGen)

	method.WriteString("\n")

	if hasData {
		method.WriteString("\nr, err := bot.Post(\"" + tgMethodName + "\", v, data)")
	} else {
		method.WriteString("\nr, err := bot.Get(\"" + tgMethodName + "\", v)")
	}
	method.WriteString("\n	if err != nil {")
	method.WriteString("\n		return " + defaultRetVal + ", err")
	method.WriteString("\n	}")
	method.WriteString("\n")

	retVarType := retType
	retVarName := getRetVarName(retVarType)
	isPointer := strings.HasPrefix(retVarType, "*")
	addr := ""
	if isPointer {
		retVarType = strings.TrimLeft(retVarType, "*")
		addr = "&"
	}
	method.WriteString("\nvar " + retVarName + " " + retVarType)
	method.WriteString("\nreturn " + addr + retVarName + ", json.Unmarshal(r, &" + retVarName + ")")
	method.WriteString("\n}")

	return method.String()
}

func methodArgsToValues(method MethodDescription, defaultRetVal string) (string, bool) {
	hasData := false
	bd := strings.Builder{}
	for _, f := range method.Fields {
		goParam := snakeToCamel(f.Parameter)
		if !isRequiredField(f) {
			goParam = "opts." + snakeToTitle(f.Parameter)
		}

		// TODO: more than one type
		converter := goTypeToString(toGoTypes(f.Types[0]))
		if converter == "" {
			if f.Types[0] == "InputFile" {
				// TODO: support case where its just inputfile and not string

				hasData = true
				bd.WriteString("\nif " + goParam + "!= nil {")
				bd.WriteString("\n	if s, ok := " + goParam + ".(string); ok {")
				bd.WriteString("\n		v.Add(\"" + f.Parameter + "\", s)")
				bd.WriteString("\n	} else if r, ok := " + goParam + ".(io.Reader); ok {")
				bd.WriteString("\n		v.Add(\"" + f.Parameter + "\", \"attach://" + f.Parameter + "\")")
				bd.WriteString("\n		data[\"" + f.Parameter + "\"] = NamedReader{File: r}")
				bd.WriteString("\n	} else if nf, ok := " + goParam + ".(NamedReader); ok {")
				bd.WriteString("\n		v.Add(\"" + f.Parameter + "\", \"attach://" + f.Parameter + "\")")
				bd.WriteString("\n		data[\"" + f.Parameter + "\"] = nf")
				bd.WriteString("\n	} else {")
				bd.WriteString("\n		return " + defaultRetVal + ", fmt.Errorf(\"unknown type for InputFile: %T\"," + goParam + ")")
				bd.WriteString("\n	}")
				bd.WriteString("\n}")
			} else if strings.HasPrefix(f.Types[0], "Input") {
				// TODO: Add InputMedia support; use interfaces
				fmt.Println("Purposefully skipping unhandled file item to allow for later data logic", f.Types)
				continue
			}

			// dont use goParam since that contains the `opts.` section
			bytesVarName := snakeToCamel(f.Parameter) + "Bs"
			if isTgArray(f.Types[0]) {
				bd.WriteString("\nif " + goParam + " != nil {")
			}

			bd.WriteString("\n	" + bytesVarName + ", err := json.Marshal(" + goParam + ")")
			bd.WriteString("\n	if err != nil {")
			bd.WriteString("\n		return " + defaultRetVal + ", fmt.Errorf(\"failed to marshal " + f.Parameter + ": %w\", err)")
			bd.WriteString("\n	}")
			bd.WriteString("\n	v.Add(\"" + f.Parameter + "\", string(" + bytesVarName + "))")

			if isTgArray(f.Types[0]) {
				bd.WriteString("\n}")
			}
		} else {
			bd.WriteString("\nv.Add(\"" + f.Parameter + "\", " + fmt.Sprintf(converter, goParam) + ")")
		}
	}

	if hasData {
		return "\ndata := map[string]NamedReader{}" + bd.String(), hasData
	}

	return bd.String(), hasData
}

func getRetVarName(retType string) string {
	for strings.HasPrefix(retType, "*") {
		retType = strings.TrimPrefix(retType, "*")
	}
	for strings.HasPrefix(retType, "[]") {
		retType = strings.TrimPrefix(retType, "[]")
	}
	return strings.ToLower(retType[:1])
}

func getArgs(name string, method MethodDescription) (string, string) {
	var requiredArgs []string
	var optionalArgs []MethodFields
	for _, f := range method.Fields {
		if isRequiredField(f) {
			// TODO: Not just assume first type
			requiredArgs = append(requiredArgs, fmt.Sprintf("%s %s", snakeToCamel(f.Parameter), toGoTypes(f.Types[0])))
			continue
		}
		optionalArgs = append(optionalArgs, f)
	}
	optionalsStruct := ""
	if len(optionalArgs) > 0 {
		optionalsName := snakeToTitle(name) + "Opts"
		bd := strings.Builder{}
		bd.WriteString("\ntype " + optionalsName + " struct {")
		for _, opt := range optionalArgs {
			bd.WriteString("\n// " + opt.Description)
			bd.WriteString("\n" + fmt.Sprintf("%s %s", snakeToTitle(opt.Parameter), toGoTypes(opt.Types[0])))
		}
		bd.WriteString("\n}")
		optionalsStruct = bd.String()

		requiredArgs = append(requiredArgs, fmt.Sprintf("opts %s", optionalsName))
	}

	return strings.Join(requiredArgs, ", "), optionalsStruct
}

func isRequiredField(f MethodFields) bool {
	return f.Required == "Yes"
}

func snakeToTitle(s string) string {
	bd := strings.Builder{}
	for _, s := range strings.Split(s, "_") {
		bd.WriteString(strings.Title(s))
	}
	return bd.String()
}

func snakeToCamel(s string) string {
	title := snakeToTitle(s)
	return strings.ToLower(title[:1]) + title[1:]
}

func toGoTypes(s string) string {
	pref := ""
	for isTgArray(s) {
		pref += "[]"
		s = strings.TrimPrefix(s, "Array of ")
	}

	switch s {
	case "Integer":
		return pref + "int64"
	case "Float":
		return pref + "float64"
	case "Boolean":
		return pref + "bool"
	case "String":
		return pref + "string"
	}
	return pref + s
}

func isTgArray(s string) bool {
	return strings.HasPrefix(s, "Array of ")
}

func getDefaultReturnVal(s string) string {
	if strings.HasPrefix(s, "*") || strings.HasPrefix(s, "[]") {
		return "nil"
	}

	switch s {
	case "int64":
		return "0"
	case "float64":
		return "0.0"
	case "bool":
		return "false"
	case "string":
		return "\"\""
	}

	// this isnt great
	return s
}

func goTypeToString(t string) string {
	switch t {
	case "int64":
		return "strconv.FormatInt(%s, 10)"
	case "float64":
		return "strconv.FormatFloat(%s, 'f', -1, 64)"
	case "bool":
		return "strconv.FormatBool(%s)"
	case "string":
		return "%s"
	default:
		return ""
	}
}
